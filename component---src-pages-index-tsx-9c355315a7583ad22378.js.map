{"version":3,"file":"component---src-pages-index-tsx-9c355315a7583ad22378.js","mappings":"uKA8DA,UApD+D,SAAC,GAGzD,IAFLA,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,cACX,gBAAC,IAAD,MACCC,EAAMG,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,KACZ,EAA6CA,EAAKC,YAA1CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SACRR,EADN,EAAwBA,OACGK,EAAKI,OAAOC,KACjCC,EAiEd,SAAoBJ,GAClB,IAAMK,EAAI,IAAIC,KAAKN,GACfO,EAAQ,IAAMF,EAAEG,WAAa,GAC7BC,EAAM,GAAKJ,EAAEK,UACXC,EAAON,EAAEO,cAEXL,EAAMM,OAAS,IAAGN,EAAQ,IAAMA,GAChCE,EAAII,OAAS,IAAGJ,EAAM,IAAMA,GAEhC,MAAO,CAACE,EAAMJ,EAAOE,GAAKK,KAAK,KA1ERC,CAAWf,GAAX,IAAuBC,EACxC,OACE,2BACEe,IAAKlB,EAAKI,OAAOC,KACjBc,WAAS,EACTC,SAAS,6BAET,8BACE,sBACEC,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,gBAAC,EAAAC,KAAD,CACEH,MAAO,CAAEI,UAAU,QACnBC,GAAIpB,EACJqB,SAAS,OAET,wBAAMA,SAAS,YAAYhC,KAG/B,6BAAQO,IAEV,+BACE,qBACE0B,wBAAyB,CACvBC,OAAQ7B,EAAK8B,SAEfH,SAAS","sources":["webpack://blog/./src/pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm } from '../utils/typography'\n\nimport './global.css'\n\nconst BlogIndex: React.FC<{ data: any; location: Location }> = ({\n  data,\n  location,\n}) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(({ node }: { node: any }) => {\n        const { date, postname, title: postTitle } = node.frontmatter\n        const title = postTitle || node.fields.slug\n        const pathname = formatDate(date) + `/${postname}`\n        return (\n          <article\n            key={node.fields.slug}\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link\n                  style={{ boxShadow: `none` }}\n                  to={pathname}\n                  itemProp=\"url\"\n                >\n                  <span itemProp=\"headline\">{title}</span>\n                </Link>\n              </h3>\n              <small>{date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.excerpt,\n                }}\n                itemProp=\"description\"\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            postname\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction formatDate(date: string) {\n  const d = new Date(date)\n  let month = '' + (d.getMonth() + 1)\n  let day = '' + d.getDate()\n  const year = d.getFullYear()\n\n  if (month.length < 2) month = '0' + month\n  if (day.length < 2) day = '0' + day\n\n  return [year, month, day].join('/')\n}\n"],"names":["data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","map","node","frontmatter","date","postname","fields","slug","pathname","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","formatDate","key","itemScope","itemType","style","marginBottom","rhythm","Link","boxShadow","to","itemProp","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}